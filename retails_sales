-- CREATE TABLE
CREATE TABLE retail_sales(
        transactions_id INT PRIMARY KEY,	
        sale_date DATE,	
        sale_time TIME,	
        customer_id	INT,
        gender VARCHAR(15),	
        age INT,	
        category VARCHAR(15),	
        quantiy INT,	
        price_per_unit FLOAT,	
        cogs FLOAT,	
        total_sale FLOAT
);

SELECT * FROM retail_sales
LIMIT 10;

SELECT
    COUNT(*)
FROM retail_sales;



-- DATA CLEANING
SELECT * FROM retail_sales
WHERE transactions_id IS NULL;

SELECT * FROM retail_sales
WHERE sale_date IS NULL;

SELECT * FROM retail_sales
WHERE sale_time IS NULL;

SELECT * FROM retail_sales
WHERE
    transactions_id IS NULL
    OR
    sale_date IS NULL
    OR
    sale_time IS NULL
    OR
    customer_id IS NULL
    OR
    gender IS NULL
    OR
    category IS NULL
    OR
    quantiy IS NULL
    OR
    cogs IS NULL
    OR
    total_sale IS NULL;
    
--
DELETE FROM retail_sales
WHERE
    transactions_id IS NULL
    OR
    sale_date IS NULL
    OR
    sale_time IS NULL
    OR
    customer_id IS NULL
    OR
    gender IS NULL
    OR
    category IS NULL
    OR
    quantiy IS NULL
    OR
    cogs IS NULL
    OR
    total_sale IS NULL;
    
-- DATA EXPLORATION

-- HOW MANY SALES WE HAVE ?
SELECT COUNT(*) AS Total_sales FROM retail_sales;

--How many customers we have ?
SELECT COUNT(DISTINCT customer_id) AS Total_sales FROM retail_sales;
SELECT DISTINCT category AS Total_sales FROM retail_sales;

-- DATA Analysis & Business key Problems & Answers

-- My Analysis & Findings
-- Q.1 Write a SQL query to retrieve all columns for sales made on '2022-11-05
-- Q.2 Write a SQL query to retrieve all transactions where the category is 'Clothing' and the quantity sold is more than 10 in the month of Nov-2022
-- Q.3 Write a SQL query to calculate the total sales (total_sale) for each category.
-- Q.4 Write a SQL query to find the average age of customers who purchased items from the 'Beauty' category.
-- Q.5 Write a SQL query to find all transactions where the total_sale is greater than 1000.
-- Q.6 Write a SQL query to find the total number of transactions (transaction_id) made by each gender in each category.
-- Q.7 Write a SQL query to calculate the average sale for each month. Find out best selling month in each year
-- Q.8 Write a SQL query to find the top 5 customers based on the highest total sales 
-- Q.9 Write a SQL query to find the number of unique customers who purchased items from each category.
-- Q.10 Write a SQL query to create each shift and number of orders (Example Morning <=12, Afternoon Between 12 & 17, Evening >17)

-- Q.1 Write a SQL query to retrieve all columns for sales made on '2022-11-05
SELECT * FROM retail_sales
WHERE sale_date = "2022-11-05";

-- Q.2 Write a SQL query to retrieve all transactions where the category is 'Clothing' and the quantity sold is more than 10 in the month of Nov-2022
SELECT category, SUM(quantiy)
FROM retail_sales
WHERE category = "Clothing"
    AND
    STRFTIME('%Y-%m', sale_date) = '2022-11' -- STRFTIME Extrait la date
    AND
    quantiy >= 4;
    
-- Q.3 Write a SQL query to calculate the total sales (total_sale) for each category.
SELECT 
category, SUM(total_sale) AS net_sale,
COUNT(*) AS Total_Orders
FROM retail_sales
GROUP BY 1;

-- Q.4 Write a SQL query to find the average age of customers who purchased items from the 'Beauty' category.
SELECT ROUND(AVG(age), 2) as avg_age
FROM retail_sales
WHERE category = "Beauty";

-- Q.5 Write a SQL query to find all transactions where the total_sale is greater than 1000.

SELECT COUNT(transactions_id) AS Total
FROM retail_sales
WHERE total_sale > 1000;

-- Q.6 Write a SQL query to find the total number of transactions (transaction_id) made by each gender in each category.
SELECT COUNT(*) AS nb_total, category, gender
FROM retail_sales
GROUP BY category,gender;

-- Q.7 Write a SQL query to calculate the average sale for each month. Find out best selling month in each year
SELECT

    Year, 
    Month, 
    avg_total
FROM
(
    SELECT 
    STRFTIME('%Y', sale_date) AS Year,
    STRFTIME('%m', sale_date) AS Month,
    AVG(total_sale) AS avg_total,
    RANK() OVER(PARTITION BY STRFTIME('%Y', sale_date) ORDER BY AVG(total_sale) DESC) AS rank
    FROM retail_sales
    GROUP BY Month, Year
) AS T1
WHERE rank = 1;



-- Q.8 Write a SQL query to find the top 5 customers based on the highest total sales 
SELECT customer_id,
    SUM(total_sale) AS Total_Sales
 FROM retail_sales
 GROUP BY customer_id
 ORDER BY Total_Sales DESC
 LIMIT 5;

-- Q.9 Write a SQL query to find the number of unique customers who purchased items from each category.
SELECT category,
    COUNT(DISTINCT customer_id) AS nb_uniq
 FROM retail_sales
 GROUP BY category;
 
-- Q.10 Write a SQL query to create each shift and number of orders (Example Morning <=12, Afternoon Between 12 & 17, Evening >17)
-- Pour Group by sur un case il faut un CTI
WITH hourly_sale AS (
    SELECT *,
        CASE
            WHEN CAST(STRFTIME('%H', sale_time) AS INTEGER) < 12 THEN 'Morning'
            WHEN CAST(STRFTIME('%H', sale_time) AS INTEGER) BETWEEN 12 AND 17 THEN 'Afternoon'
            ELSE 'Evening'
        END AS shift
    FROM retail_sales
)
SELECT shift, COUNT(*) AS total
FROM hourly_sale
GROUP BY shift;

-- END OF PROJECT